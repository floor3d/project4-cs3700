#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib


class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        #running list of packets. used to reorder disordered packets
        self.window = []

        #sequence numbers we have received.
        self.recvd_seqs = []


    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]
                try:
                    # try to parse out message, otherwise we drop it because it's corrupt
                    msg = json.loads(data.decode('utf-8'))
                except json.decoder.JSONDecodeError:
                   continue 
                self.handleMsg(msg)

        return


    #handles the messages received
    def handleMsg(self, msg):
        self.log("Received data message %d" % msg["seq_num"])
        if(self.msg_is_corrupt(msg)):
            #message has data that does not match its hash. drop it
            return
        data = msg["data"]
        seq_num = int(msg["seq_num"])
        
        if(seq_num not in self.recvd_seqs): 
            #we have not received this before so let's handle it
            
            if(len(self.recvd_seqs) == 0 and seq_num == 0):
                self.printMessage(msg)
                self.update_window()
            elif(len(self.recvd_seqs) == 0):
                self.window.append(msg)


            if(len(self.recvd_seqs) > 0):
                recent_seq = int(self.recvd_seqs[len(self.recvd_seqs) - 1])
                if(recent_seq + 1 != seq_num):
                    #this did not come in order. add it to the window
                    self.window.append(msg)
                else:
                    #came in order. print it out
                    #and see if we can print other messages out too
                    self.printMessage(msg)
                    self.update_window()
        self.send({ "type": "ack", "seq_num": seq_num})

    
    #update running list of packets that have not been printed yet
    def update_window(self):
        #sort by seq num for easy looping
        self.window.sort(key=lambda x: int(x["seq_num"]))
        toRemove = []
        for i in range(len(self.window)):
            recent_seq = self.recvd_seqs[len(self.recvd_seqs) - 1]
            current = self.window[i]
            if(int(current["seq_num"]) - 1 == recent_seq):
                #this is next to print because we already printed the one directly before it
                #print and remove from window
                toRemove.append(i)
                self.printMessage(current)
        for i in toRemove[::-1]:
            self.window.pop(i)
            

    #prints messages to stdout
    def printMessage(self, msg):
        seq_num = msg["seq_num"]
        # Print out the data to stdout
        print(msg["data"], end='', flush=True)
        self.recvd_seqs.append(seq_num)



    #compare hash with message's hash. they must be the same
    def msg_is_corrupt(self, msg):
        if("data" not in msg):
            return True
        return str(hashlib.md5(str(msg["data"]).encode()).hexdigest()) != str(msg["hash"])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
